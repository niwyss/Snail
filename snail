#!/usr/bin/python
# -*- coding:utf-8 -*-

# Copyright 2012 Nicolas Wyss
#
# This file is part of SNAIL.
#
# SNAIL is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SNAIL is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SNAIL.  If not, see <http://www.gnu.org/licenses/>.

from modules import database
from modules import find
from modules import train

import argparse
import sys
import os

# Informations on the product
product_name = "snail"
product_description = 'snail : put a snail in your shell'
product_version = '0.2'

def parse_arguments():

    # Create the top-level parser
    parser = argparse.ArgumentParser(description=product_description, prog=product_name)
    parser.add_argument('--version', action='version', version='%(prog)s ' + product_version)
    parser.add_argument('-v', '--verbose', action='store_true', help='verbose')
    
    # Create the low-level parser
    subparser = parser.add_subparsers(title='commands', dest="command_name" )

    # Create the parser for the "init" command
    parser_init = subparser.add_parser('init', help='create, init the database')
    
    # Create the parser for the "find" command
    parser_station = subparser.add_parser('find', help='find stations')
    parser_station.add_argument('patterns', action='store', nargs='*', help='patterns')
    
    # Create the parser for the "train" command
    parser_train = subparser.add_parser('train', help='list next trains on a station')
    parser_train.add_argument('station', action='store', help='the DDG code of the station')

    # Create the parser for the "help" command
    parser_help = subparser.add_parser('help', help='help for a command')

    return parser

# Get parser
parser = parse_arguments()

# Get options from command line
args = parser.parse_args()

# Get the path to command from where she's called                           
path = "."
if os.path.islink(sys.argv[0]):
    path = os.readlink(sys.argv[0])[:-5]
else:
    path =  sys.argv[0][:-5]
path = os.path.abspath(path) + os.sep

# The default database
database_path = path + 'snail.sqlite'

# The default parameters
parameters_path = path + 'parameters.json'

# Command : init
if args.command_name == 'init':
    
    # Create the base
    database.create(database_path)

    # Init the base
    database.init(database_path, parameters_path)

# Command : find
elif args.command_name == 'find':

    # List stations
    find.station(database_path, args.patterns)

# Command : train
elif args.command_name == 'train':

    # List the trains
    train.list(database_path, parameters_path, args.station)

# No command : help
else:
    parser.print_help()







